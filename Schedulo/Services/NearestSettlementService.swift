//
//  NearestSettlementService.swift
//  Schedulo
//
//  Created by Viktor Zavhorodnii on 08/06/2025.
//

import OpenAPIRuntime
import OpenAPIURLSession

typealias NearestSettlement = Components.Schemas.NearestCityResponse

protocol NearestSettlementServiceProtocol {
    func getNearestSettlement(lat: Double, long: Double) async throws -> NearestSettlement
}

/// /// Service provides wrapper over the autogenerated OpenAPI client for the "getNearestCity" method
final class NearestSettlementService: NearestSettlementServiceProtocol {
    private let client: Client
    private let apikey: String

    init(client: Client, apikey: String) {
        self.client = client
        self.apikey = apikey
    }
    
    /// Retrieves an info about the nearest city to a given position. The search might be constraint  by specified radius. 10km by default, max 50km
    /// - Parameters:
    ///   - lat: latitude
    ///   - long: longitude
    /// - Returns: info about nearest city
    func getNearestSettlement(lat: Double, long: Double) async throws -> NearestSettlement {
        let response = try await client.getNearestCity(query: .init(
            apikey: apikey,
            lat: lat,
            lng: long
        ))
        
        return try response.ok.body.json
    }
}

/// Func for test API call "getNearestCity" method
func testFetchNearestSettlement() {
    Task {
        do {
            let client = Client(
                serverURL: try Servers.Server1.url(),
                transport: URLSessionTransport()
            )
            
            let service = NearestSettlementService(
                client: client,
                apikey: appKeys.yandexRaspAPIKey.rawValue
            )
            
            print("Fetching nearest settlement")
            let response = try await service.getNearestSettlement(
                lat: 55.558741,
                long: 37.378847
            )
            print("Got response", response)
        } catch {
            print("Error fetching nearest settlement:", error)
        }
    }
}
